{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          throw Error('Could not fetch the data for that resource');\n        }\n\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          setError(err.message);\n          setIsPending(false);\n        }\n      });\n    }, 1000);\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/andrewwelton/github/LearnReactJs/dojo-blog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACV,GAAD,EAAM;AAACW,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAAnB,OAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,YAAG,CAACA,GAAG,CAACC,EAAR,EAAW;AACP,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACH;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OANL,EAOKJ,IAPL,CAOUX,IAAI,IAAI;AACVC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAXL,EAYKW,KAZL,CAYWC,GAAG,IAAI;AACV,YAAGA,GAAG,CAACC,IAAJ,KAAa,YAAhB,EAA8B;AAC1BC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,SAFD,MAEO;AACHf,UAAAA,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR;AACAlB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,OAnBL;AAoBH,KArBS,EAqBP,IArBO,CAAV;AAuBA,WAAO,MAAMG,SAAS,CAACgB,KAAV,EAAb;AACH,GA3BQ,EA2BN,CAACvB,GAAD,CA3BM,CAAT;AA6BA,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CAnCD;;GAAMN,Q;;AAqCN,eAAeA,QAAf","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const abortCont = new AbortController();\n\n        setTimeout(() => {\n            fetch(url, {signal: abortCont.signal})\n                .then(res => {\n                    if(!res.ok){\n                        throw Error('Could not fetch the data for that resource');\n                    }\n                    return res.json();\n                })\n                .then(data => {\n                    setData(data);\n                    setIsPending(false);\n                    setError(null);\n                })\n                .catch(err => {\n                    if(err.name === 'AbortError') {\n                        console.log('fetch aborted');\n                    } else {\n                        setError(err.message);\n                        setIsPending(false);\n                    }\n                })\n        }, 1000)\n\n        return () => abortCont.abort();\n    }, [url]);\n\n    return {data, isPending, error}\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}